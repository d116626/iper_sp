# -*- coding: utf-8 -*-
import scrapy
import json
import pandas as pd
import time


class IcmsSpider(scrapy.Spider):
    name = 'icms'
    site_url = 'https://www.fazenda.sp.gov.br/RepasseConsulta/Consulta/repasse.aspx'
    # allowed_domains = ['www.fazenda.sp.gov.br/RepasseConsulta/Consulta/repasse.aspx']
    start_urls = [site_url]

    def parse(self, response):
        #list of all cities codes
        city_codes = ['1508', '1510', '1521', '1545', '1533', '6075', '1557', '1569', '7328', '1570', '1582', '1594', '1600', '7330', '1612', '1624', '1636', '1648', '1650', '1661', '1673', '1685', '1697', '1703', '1715', '1727', '1739', '1740', '1752', '1764', '7341', '1776', '1788', '1790', '1806', '7353', '1818', '1820', '7754', '1831', '1843', '1855', '1867', '1879', '1880', '7365', '1892', '1909', '1910', '1922', '1934', '1946', '1958', '1960', '1971', '1983', '1995', '2008', '2010', '2021', '7377', '2033', '2045', '2057', '2069', '2070', '2082', '2094', '2100', '2112', '2124', '7389', '2136', '2148', '2150', '2161', '2173', '2185', '2197', '2203', '7390', '2215', '2227', '2239', '7213', '2240', '2252', '2264', '7766', '2276', '2288', '2290', '2306', '2318', '2320', '2331', '2343', '2355', '2367', '2379', '2380', '2392', '2409', '2410', '7407', '2422', '2434', '7419', '2446', '2458', '2460', '2471', '2483', '7778', '2495', '2501', '7420', '2513', '2525', '2537', '2549', '2550', '2562', '2574', '2586', '2598', '2604', '2616', '2628', '2630', '2653', '2641', '2665', '7195', '2677', '2689', '2690', '2707', '2719', '2720', '2732', '2744', '2756', '2768', '2770', '2781', '2793', '2800', '2811', '2823', '2835', '2847', '2859', '2860', '7225', '2872', '2884', '2896', '2902', '2914', '2926', '2938', '2940', '2951', '2963', '2975', '7432', '7237', '2987', '2999', '7444', '7456', '5307', '7249', '7468', '3001', '3013', '7250', '3025', '3037', '3049', '7869', '3050', '3062', '3074', '3086', '3098', '3104', '3116', '3128', '3130', '3141', '3153', '3165', '7870', '3177', '3189', '3190', '3207', '3219', '3220', '3232', '3244', '3256', '3268', '3270', '3281', '3293', '3300', '3311', '3323', '3335', '3347', '3359', '3360', '7262', '3372', '3384', '7470', '7481', '3396', '3402', '7274', '3414', '3426', '3438', '3440', '7285', '3451', '3463', '3475', '3487', '3499', '3505', '3517', '7675', '7493', '3529', '3530', '3542', '3554', '3566', '3578', '3580', '3591', '7845', '3608', '3610', '3621', '3633', '3645', '3657', '3669', '3670', '3682', '3694', '7500', '3700', '3712', '3724', '3736', '3748', '7687', '3750', '3761', '3773', '3785', '3797', '3803', '3815', '3827', '3839', '3840', '3852', '3864', '3876', '3888', '3890', '3906', '3918', '3920', '3931', '3943', '3955', '3967', '3979', '3980', '3992', '4005', '4017', '4029', '4030', '4042', '4054', '4066', '7882', '4078', '4080', '4091', '4108', '4110', '4121', '4133', '4145', '4157', '4169', '4170', '4182', '4194', '4200', '7699', '4212', '4224', '4236', '4248', '4250', '4261', '4273', '4285', '4297', '4303', '4315', '4327', '4339', '4340', '4352', '4364', '7511', '4376', '4388', '4390', '4406', '4418', '4420', '4431', '4443', '7705', '4455', '4467', '4479', '4480', '4492', '4509', '4510', '4522', '4534', '4546', '4558', '4560', '4571', '4583', '4595', '4601', '4613', '4625', '4637', '4649', '4650', '4662', '4674', '4686', '7298', '4698', '7894', '4704', '4716', '4728', '4730', '4741', '4753', '4765', '7717', '7523', '7900', '4777', '4789', '4790', '4807', '4819', '4820', '7535', '4832', '4844', '4856', '4868', '4870', '4881', '4893', '4900', '4911', '4923', '4935', '4947', '4959', '4960', '7912', '4972', '4984', '4996', '5009', '5010', '5022', '5034', '5046', '5058', '5060', '5083', '5095', '5071', '5101', '7547', '5113', '5125', '5137', '7924', '5149', '5150', '5162', '5174', '5186', '5198', '7559', '5204', '5216', '5228', '5230', '5241', '5253', '5265', '5277', '5289', '5290', '5319', '5320', '5332', '5344', '5356', '5370', '5381', '5393', '5400', '5411', '5368', '5423', '5435', '5447', '5459', '5460', '5472', '5484', '5496', '5502', '7560', '5514', '5526', '5538', '5540', '5551', '7572', '5563', '7780', '5575', '5587', '7791', '5599', '5605', '5617', '5629', '5630', '5642', '7808', '5654', '5666', '5678', '5680', '5691', '5708', '5710', '5721', '5733', '5745', '5757', '5769', '5770', '5782', '5794', '5800', '7936', '7584', '5812', '5824', '5848', '5850', '5861', '5873', '5885', '5897', '5903', '5836', '7304', '5915', '5927', '5939', '5940', '5952', '5964', '5976', '5988', '5990', '7596', '6002', '6026', '6014', '6038', '6040', '6051', '6063', '6087', '6099', '6105', '7810', '6117', '6129', '6130', '6142', '6154', '6166', '6178', '6180', '6191', '6210', '6208', '6221', '7821', '6245', '6233', '6257', '6269', '6270', '6300', '7602', '6282', '6294', '6312', '6324', '6336', '6348', '6350', '6361', '6373', '6385', '6397', '6403', '7614', '6415', '6427', '6440', '6439', '6464', '6476', '6452', '7729', '6488', '6490', '6506', '1004', '6518', '6520', '6531', '6543', '6555', '6567', '6579', '6580', '6592', '6609', '6610', '6622', '6634', '6646', '6658', '6660', '6671', '6683', '6695', '6701', '6713', '7626', '6725', '6737', '6749', '6750', '6762', '6774', '6786', '6798', '6804', '6816', '6828', '6830', '7857', '6841', '6853', '7638', '6865', '7316', '6877', '6889', '6890', '6907', '6919', '6920', '6932', '7730', '6944', '7948', '6956', '6968', '7640', '6970', '6981', '6993', '7006', '7651', '7018', '7020', '7031', '7043', '7055', '7067', '7079', '7092', '7080', '7109', '7663', '7110', '7201', '7122', '7134', '7146', '7158', '7160', '7833', '7171', '7183', '7742']
        #list of possible years
        years = ['2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005', '2004', '2003', '2002', '2001', '2000', '1999', '1998', '1997', '1996', '1995']

        #iterate over all cities and years
        for city_code in city_codes:
            for year in years:

                EVENTVALIDATION = response.xpath("//*[@id='__EVENTVALIDATION']/@value").extract_first()
                VIEWSTATE = response.xpath("//*[@id='__VIEWSTATE']/@value").extract_first()
                VIEWSTATEGENERATOR = response.xpath("//*[@id='__VIEWSTATEGENERATOR']/@value").extract_first()
                # VIEWSTATEGENERATOR = '79344604'
                data = {
                        '__VIEWSTATE': VIEWSTATE,
                        '__VIEWSTATEGENERATOR': VIEWSTATEGENERATOR,
                        '__EVENTVALIDATION': EVENTVALIDATION,
                        "ctl00$ConteudoPagina$ddlMuni":city_code,
                        'ctl00$ConteudoPagina$rblTipo':'ANO',
                        'ctl00$ConteudoPagina$ddlAno':year,
                        'ctl00$ConteudoPagina$btnConfirmar':'Confirmar'
                    }
                header = {
                    'Content-Type':' application/x-www-form-urlencoded'
                }
                yield scrapy.FormRequest(self.site_url, headers=header, formdata = data, callback=self.parse_months,  dont_filter=False)

    def parse_months(self,response):
        #get the city code
        city_codes = response.xpath('//*[@selected="selected"]/@value').extract()
        city_code = city_codes[0]

        #get the city name and the year
        city_year = response.xpath('//*[@selected="selected"]/text()').extract()
        city_name=city_year[0]
        year     =city_year[1]
        print('\n\n',city_code,city_name ,year,'\n\n')
        
        #get the columns
        cols = response.xpath('//*[@id="ConteudoPagina_tbRepasse"]/tr//table//th/b/text()').extract()
        # print(cols)
        
        #get the months
        months  = response.xpath('//*[@id="ConteudoPagina_tbRepasse"]/tr//table/tr/td/font//font/text()').extract()      
        months.remove('Total')
        # print(months)

        #get the values
        values = response.xpath('//*[@bgcolor="#EEEEEE"]/text()').extract()
        # print(values)

        #create the columns with values
        icms=[]
        ipva=[]
        fund_exp=[]
        comp=[]
        total=[]
        for j in range(len(cols)):
            for i in range(j,len(values),5):
                if j==0:
                    icms.append(values[i])
                if j==1:
                    ipva.append(values[i])
                if j==2:
                    fund_exp.append(values[i])
                if j==3:
                    comp.append((values[i]))
                if j==4:
                    total.append((values[i]))
        
        #criate the dict to make a datafame
        final_table = {}
        final_table['city_code'] = [city_code for i in months]
        final_table['city_name'] = [city_name for i in months]
        final_table['year'] = [year for i in months]
        final_table[cols[0]] = months
        final_table[cols[1]] = icms
        final_table[cols[2]] = ipva
        final_table[cols[3]] = fund_exp
        final_table[cols[4]] = comp
        final_table[cols[5]] = total

        #create the dataframe to save 
        df = pd.DataFrame.from_dict(final_table)
        #create a column with date_time of capture
        df['data_de_captura'] = pd.Timestamp.now()
        df.to_csv('icms_2.csv',mode='a', header=False ,index=False, encoding='utf-8')